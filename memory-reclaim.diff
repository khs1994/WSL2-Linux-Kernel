diff --git a/arch/x86/include/asm/hyperv-tlfs.h b/arch/x86/include/asm/hyperv-tlfs.h
index 29336574d..534e0beff 100644
--- a/arch/x86/include/asm/hyperv-tlfs.h
+++ b/arch/x86/include/asm/hyperv-tlfs.h
@@ -379,6 +379,8 @@ struct hv_tsc_emulation_status {
 #define HVCALL_RETARGET_INTERRUPT		0x007e
 #define HVCALL_FLUSH_GUEST_PHYSICAL_ADDRESS_SPACE 0x00af
 #define HVCALL_FLUSH_GUEST_PHYSICAL_ADDRESS_LIST 0x00b0
+#define HVCALL_QUERY_CAPABILITIES		0x8001
+#define HVCALL_MEMORY_HEAT_HINT			0x8003
 
 #define HV_X64_MSR_VP_ASSIST_PAGE_ENABLE	0x00000001
 #define HV_X64_MSR_VP_ASSIST_PAGE_ADDRESS_SHIFT	12
@@ -877,6 +879,12 @@ union hv_gpa_page_range {
 		u64 largepage:1;
 		u64 basepfn:52;
 	} page;
+	struct {
+		u64:12;
+		u64 page_size:1;
+		u64 reserved:8;
+		u64 base_large_pfn:43;
+	};
 };
 
 /*
@@ -950,4 +958,21 @@ struct hv_retarget_device_interrupt {
 	u64 reserved2;
 	struct hv_device_interrupt_target int_target;
 } __packed __aligned(8);
+
+#ifdef CONFIG_PAGE_REPORTING
+#define HV_CAPABILITY_MEMORY_COLD_DISCARD_HINT	BIT(8)
+
+// The whole argument should fit in a page to be able to pass to the hypervisor
+// in one hypercall.
+#define HV_MAX_GPA_PAGE_RANGES ((PAGE_SIZE - 8)/sizeof(union hv_gpa_page_range))
+
+/* HvExtMemoryHeatHint hypercall */
+#define HV_MEMORY_HINT_TYPE_COLD_DISCARD	BIT(1)
+struct hv_memory_hint {
+	u64 type:2;
+	u64 reserved:62;
+	union hv_gpa_page_range ranges[1];
+};
+
+#endif //CONFIG_PAGE_REPORTING
 #endif
diff --git a/drivers/hv/Kconfig b/drivers/hv/Kconfig
index 79e5356a7..66c794d92 100644
--- a/drivers/hv/Kconfig
+++ b/drivers/hv/Kconfig
@@ -23,6 +23,7 @@ config HYPERV_UTILS
 config HYPERV_BALLOON
 	tristate "Microsoft Hyper-V Balloon driver"
 	depends on HYPERV
+	select PAGE_REPORTING
 	help
 	  Select this option to enable Hyper-V Balloon driver.
 
diff --git a/drivers/hv/hv_balloon.c b/drivers/hv/hv_balloon.c
index 32e3bc0aa..59c36292e 100644
--- a/drivers/hv/hv_balloon.c
+++ b/drivers/hv/hv_balloon.c
@@ -21,12 +21,14 @@
 #include <linux/memory.h>
 #include <linux/notifier.h>
 #include <linux/percpu_counter.h>
-
+#include <linux/page_reporting.h>
 #include <linux/hyperv.h>
 #include <asm/hyperv-tlfs.h>
 
 #include <asm/mshyperv.h>
 
+#include <asm/mshyperv.h>
+
 #define CREATE_TRACE_POINTS
 #include "hv_trace_balloon.h"
 
@@ -563,6 +565,10 @@ struct hv_dynmem_device {
 	 * The negotiated version agreed by host.
 	 */
 	__u32 version;
+
+#ifdef CONFIG_PAGE_REPORTING
+	struct page_reporting_dev_info ph_dev_info;
+#endif
 };
 
 static struct hv_dynmem_device dm_device;
@@ -1565,6 +1571,93 @@ static void balloon_onchannelcallback(void *context)
 
 }
 
+#ifdef CONFIG_PAGE_REPORTING
+static u64 hyperv_query_ext_cap(void)
+{
+	u64 *cap;
+	unsigned long flags;
+	u64 ret = 0;
+
+	local_irq_save(flags);
+	cap = *(u64 **)this_cpu_ptr(hyperv_pcpu_input_arg);
+	if (hv_do_hypercall(HVCALL_QUERY_CAPABILITIES, NULL, cap) ==
+	    HV_STATUS_SUCCESS)
+		ret = *cap;
+
+	local_irq_restore(flags);
+	return ret;
+}
+
+static void hyperv_discard_pages(struct scatterlist **sgs, unsigned int nents)
+{
+	unsigned long flags;
+	struct hv_memory_hint *hint;
+	int i;
+	struct scatterlist *sg;
+	u64 status;
+
+	WARN_ON(nents > HV_MAX_GPA_PAGE_RANGES);
+	local_irq_save(flags);
+	hint = *(struct hv_memory_hint **)this_cpu_ptr(hyperv_pcpu_input_arg);
+	if (!hint) {
+		local_irq_restore(flags);
+		return;
+	}
+
+	hint->type = HV_MEMORY_HINT_TYPE_COLD_DISCARD;
+	hint->reserved = 0;
+	for (i = 0, sg = sgs[0]; sg; sg = sg_next(sg), i++) {
+		int order;
+		union hv_gpa_page_range *range;
+
+		order = get_order(sg->length);
+		range = &hint->ranges[i];
+		range->address_space = 0;
+		range->page.largepage = 1;
+		range->page.additional_pages = (1ull << (order - 9)) - 1;
+		range->base_large_pfn = page_to_pfn(sg_page(sg)) >> 9;
+	}
+
+	WARN_ON(i != nents);
+
+	status = hv_do_rep_hypercall(HVCALL_MEMORY_HEAT_HINT, nents, 0,
+				     hint, NULL);
+	local_irq_restore(flags);
+	status &= HV_HYPERCALL_RESULT_MASK;
+	WARN_ON(status != HV_STATUS_SUCCESS);
+}
+
+static int hv_page_hinting(struct page_reporting_dev_info *ph_dev_info,
+			   struct scatterlist *sg, unsigned int nents)
+{
+	hyperv_discard_pages(&sg, nents);
+	return 0;
+}
+
+static int enable_hinting(void)
+{
+	int ret;
+
+	if (!(hyperv_query_ext_cap() &
+	      HV_CAPABILITY_MEMORY_COLD_DISCARD_HINT)) {
+		pr_info("cold discard hint not supported\n");
+		return 0;
+	}
+
+	dm_device.ph_dev_info.report = hv_page_hinting;
+	ret = page_reporting_register(&dm_device.ph_dev_info);
+	if (ret == 0)
+		pr_info("cold memory discard enabled\n");
+	return ret;
+}
+
+static void disable_hinting(void)
+{
+	if (dm_device.ph_dev_info.report)
+		page_reporting_unregister(&dm_device.ph_dev_info);
+}
+#endif
+
 static int balloon_connect_vsp(struct hv_device *dev)
 {
 	struct dm_version_request version_req;
@@ -1719,6 +1812,11 @@ static int balloon_probe(struct hv_device *dev,
 		goto probe_error;
 	}
 
+#ifdef CONFIG_PAGE_REPORTING
+	if (enable_hinting() < 0)
+		goto probe_error;
+#endif
+
 	return 0;
 
 probe_error:
@@ -1745,6 +1843,10 @@ static int balloon_remove(struct hv_device *dev)
 	cancel_work_sync(&dm->balloon_wrk.wrk);
 	cancel_work_sync(&dm->ha_wrk.wrk);
 
+#ifdef CONFIG_PAGE_REPORTING
+	disable_hinting();
+#endif
+
 	kthread_stop(dm->thread);
 	vmbus_close(dev->channel);
 #ifdef CONFIG_MEMORY_HOTPLUG
